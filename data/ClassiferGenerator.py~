# -*- coding: utf-8 -*-
"""
Created on Thu Oct 17 15:15:59 2013

@author: tjacek
"""
import math,random

class Dataset(object):
   def __init__(self,size,dim,instances):
       self.size=size
       self.dim=dim
       self.instances=instances

   def getPoints(self):
       fun=lambda inst : inst.point
       return map(fun,self.instances)
   
   def getLabels(self):
       fun=lambda inst : inst.category
       return map(fun,self.instances)

   def getDim(self,i):
       fun=lambda inst:inst.point[i]
       return map(fun,self.instances)
   
   def getAllDims(self):
       dims=[]
       for i in range(0,self.dim):
	   dim_i=self.getDim(i)
           dims.append(dim_i)
       return dims
   
   def separate(self):
       dataSeries={}
       for instance in self.instances:
	   cat=instance.getLabel()
           dataSeries.setdefault(cat,[])
	   dataSeries[cat].append(instance)
       for key in dataSeries:
	   rawData=dataSeries[key]
	   dataSeries[key]=Dataset(self.size,self.dim,rawData)
       return dataSeries

   def split(self,p):
       inst1=[]
       inst2=[]
       size=float(len(self.instances))
       c=0.0
       for inst in self.instances:
           if(p < (c/size)):
               inst1.append(inst)
           else:
               inst2.append(inst)
           c+=1.0 
       data1=Dataset(len(inst1),self.dim,inst1)
       data2=Dataset(len(inst2),self.dim,inst2)
       return data1,data2

   def __str__(self):
       s=""
       for instance in self.instances:
	   s+=str(instance)
       return s

class Instance(object):
    def __init__(self,point,category):	
        self.point=point
        self.size=len(point)
	self.category=category

    def toBool(self):
	if(self.category>0):
            return True
        else:
            return False    

    def getLabel(self):
        s= str(self.toBool())
        return s.lower()

    def setLabel(self,label):
        if(label=="true"):
            self.category=1.0
        else:
            self.category=-1.0

    def __str__(self):
        s=""
        for cord in self.point:
	    s+=str(cord)+","
        if(self.category!=None):
            s+=self.getLabel()+"\n"
        else:
            s=s.replace(",","\n")
        return s

def createNewDataset(reduPoints,labels,dim=3):
    instances=[]
    size=len(labels)
    for i in range(0,size):
        instance=Instance(reduPoints[i],labels[i])
        instances.append(instance)
    return Dataset(size,dim,instances)

def createUnlabeledDataset(reduPoints,dim=3):
    instances=[]
    for point in reduPoints:
	instance=Instance(point,None)
        instances.append(instance)
    return Dataset(len(reduPoints),dim,instances)

def generateDataset(n,dim,pred,scale=10):
    seq=randomSeq(n,dim,scale)
    instances=classification(seq,pred)
    return Dataset(n,dim,instances)

def randomSeq(n=10,dim=3,scale=1.0):
    rList=[]
    dist=getUniformDist(scale)
    for i in range(0,n):
        rList.append(randomPoint(dist,dim))
    return rList

def randomPoint(dist,dim=3):
    point=[]
    for i in range(0,dim):
        point.append(dist())
    return point

def r(x,y):
    return math.sqrt(x*x + y*y)
        
def uniform(scale=1.0,a=0.0,b=1.0):
    return scale * random.uniform(a,b)

def getUniformDist(scale,a=0.0,b=1.0):
    return lambda : uniform(scale,a,b)
    
def classification(seq,pred):
    rawInstances=[]
    for point in seq:
        category=pred(point)
        instance=Instance(point,category)
        rawInstances.append(instance)
    return rawInstances

def linearPredict(point):
    if(sum(point)>10.0):
        return 1.0
    else:
        return 0.0

def nonLinearPredict(point):
    #sqr=list(map(lambda x:x*x,point))
    #sqr=sum(sqr)
    x=0.2*point[0]
    y=0.2*point[1]
    if(0.5*x*x>y):
        return 1.0
    else:
        return 0.0

def box(point):
    boxes=list(map(lambda x:int(x>5.0),point))
    parity= sum(boxes) % 2
    return float(parity)

def sphere(point):
    point=map(lambda x:0.2*x-1.0,point)
    dist=sum(map(lambda x:x*x,point))
    if(math.sqrt(dist)<1.41):
        return 1.0
    else:
        return 0.0

predDir ={ "Linear":linearPredict,"NonLinear":nonLinearPredict,
"Box":box,"Sphere":sphere}
